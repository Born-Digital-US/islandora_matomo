<?php

/**
 * @file
 * The main Piwik module file.
 */

define('ISLANDORA_PERSON_REPORT_VIEW_PERMISSION', 'view islandora matomo person report');
define('ISLANDORA_ORGANIZATION_REPORT_VIEW_PERMISSION', 'view islandora matomo organization report');
define('ISLANDORA_OBJECT_REPORT_VIEW_PERMISSION','view islandora matomo reports');

/**
 * Implements hook_menu().
 */
function islandora_matomo_menu() {
  $items = [];
  $items['admin/islandora/tools/matomo'] = [
    'title' => 'Islandora Matomo',
    'description' => 'Configure Islandora Matomo.',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['islandora_matomo_admin_settings'],
    'access arguments' => ['administer site configuration'],
    'file' => 'includes/config.inc',
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['admin/reports/islandora_matomo_reports'] = [
    'title' => 'Islandora Matomo Reports',
    'description' => 'Makes Matomo reports available to authorized users.',
    'page callback' => 'islandora_matomo_reports',
    'access arguments' => ['view islandora matomo reports'],
    'file' => 'includes/reports.inc',
    'type' => MENU_NORMAL_ITEM,
  ];
  $items['admin/reports/islandora_matomo_reports2'] = [
    'title' => 'Islandora Matomo Reports Ajax',
    'description' => 'Makes Matomo reports available to authorized users.',
    'page callback' => 'drupal_get_form',
    'file' => 'includes/reports.form.inc',
    'page arguments' => array('islandora_matomo_report_form'),
    'access arguments' => ['view islandora matomo reports'],
    'type' => MENU_NORMAL_ITEM,
  ];

  $items['islandora/object/%islandora_object/readership'] = [
    'title' => 'Readership Dashboard',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'file' => 'includes/reports.form.inc',
    'page arguments' => array('islandora_matomo_readershipreport_form',2),
    'access callback' => 'islandora_matomo_readership_access_callback',
    'access arguments' => array(2),
  ];

  return $items;
}

function islandora_matomo_readership_access_callback(AbstractObject $object) {
  return islandora_object_access(ISLANDORA_VIEW_OBJECTS, $object) && array_intersect($object->models,  array('islandora:personCModel')) &&
    (user_access(ISLANDORA_PERSON_REPORT_VIEW_PERMISSION) || user_access(ISLANDORA_OBJECT_REPORT_VIEW_PERMISSION));
}


/**
 * Implements hook_enable().
 */
function  islandora_matomo_enable() {
  // Check if this new send matomo report field is not already there.
  if (!field_info_field('field_islandoramatomo_sendreport')) {
    $field = array(
      'field_name' => 'field_islandoramatomo_sendreport',
      'type' => 'list_boolean',
      'cardinality' => 1,
      'settings' => array(
        'allowed_values' => array(
          1 => 'Yes',
          0 => 'No',
        ),
      ),
    );
    field_create_field($field);

    // Create the instance on the bundle.
    $instance = array(
      'field_name' => 'field_islandoramatomo_sendreport',
      'entity_type' => 'user',
      'label' => 'Send Islandora Matomo Report via email every month.',
      'bundle' => 'user',
      // If you don't set the "required" property then the field wont be required by default.
      'required' => TRUE,
      'settings' => array(
        // Field showing up on the registration form.
        'user_register_form' => 1,
      ),
      'widget' => array(
        'type' => 'options_buttons',
      ),
      'weight' => '1',
    );
    field_create_instance($instance);
  }
  // Check if this new u1 to drupal value field is not already there.
  if (!field_info_field('field_islandoramatomo_userkey')) {
    $field2 = [
      'field_name' => 'field_islandoramatomo_userkey',
      'type' => 'text',
      'cardinality' => 1,
      'max_length' => 64,
    ];
    field_create_field($field2);
    // @TODO there could be security concern here.
    // If a user can change its own userkey and access via that to another dashboard?
    // Create the instance on the bundle.
    $instance2 = [
      'field_name' => 'field_islandoramatomo_userkey',
      'entity_type' => 'user',
      'label' => 'Value used to connect an Islandora Scholar Profile to this User account.',
      'bundle' => 'user',
      // If you don't set the "required" property then the field wont be required by default.
      'required' => TRUE,
      'settings' => [
        // Field showing up on the registration form.
        // If 0 it will only show on edit. Ask @noah.
        'user_register_form' => 1,
      ],
      'widget' => [
        'type' => 'text_textfield',
      ],
      'display' => [
        'default' => [
          'type' => 'text_default',
        ],
      ],
      'weight' => '2',
    ];
    field_create_instance($instance2);
  }
  if (!field_info_field('field_islandoramatomo_lastreport')) {
    $field3 = [
      'field_name' => 'field_islandoramatomo_lastreport',
      'type' => 'number_integer',
      'cardinality' => 1,
      'translatable' => FALSE,
    ];
    field_create_field($field3);
    $instance3 = array(
      'field_name' => 'field_islandoramatomo_lastreport',
      'entity_type' => 'user',
      'no_ui' => TRUE,
      'display' => array(
        'default' => array(
          'type' => 'hidden'
        ),
        'teaser' => array(
          'type' => 'hidden'
        )
      ),
      'label' => 'Value used to track last sent report for this user.',
      'bundle' => 'user',
      // If you don't set the "required" property then the field wont be required by default.
      'settings' => array(
        // Field showing up on the registration form.
        // If 0 it will only show on edit. Ask @noah.
        'user_register_form' => 0,
      ),
      'weight' => '3',
    );
    field_create_instance($instance3);
  }
}

/**
 * Implements hook_form_alter().
 */
function islandora_matomo_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == "user_profile_form") {
    // Hiddes the timestamp tracking field from input.
    $form['field_islandoramatomo_lastreport']['#access'] = 0;
  }
}

/**
 * Implements hook_permission().
 */
function islandora_matomo_permission() {
  return [
    ISLANDORA_OBJECT_REPORT_VIEW_PERMISSION => [
      'title' => t('View Islandora Matomo reports'),
      'description' => t('View reports managed by the Islandora Matomo module'),
    ],
    ISLANDORA_ORGANIZATION_REPORT_VIEW_PERMISSION => [
      'title' => t('View Islandora Matomo by Organization reports'),
      'description' => t('View reports managed by the Islandora Matomo module'),
    ],
    ISLANDORA_PERSON_REPORT_VIEW_PERMISSION => [
      'title' => t('View Islandora Matomo by Person reports'),
      'description' => t('View reports managed by the Islandora Matomo module'),
    ],
  ];
}

/**
 * Returns the PIDs of all collections that the Islandora object belongs to.
 *
 * @param object $islandora_object
 *   The Islandora object being inspected.
 *
 * @return array $collection_pids
 *   A list of PIDS.
 */
function islandora_matomo_get_ancestor_collections($islandora_object) {
  $collection_pids = [];
  // islandora:is_member_of_collection property.
  if ($islandora_object) {
    $collections = $islandora_object->relationships->get(
      FEDORA_RELS_EXT_URI,
      'isMemberOfCollection'
    );
    // The root collection PID will be a member of 0 collections, so we need
    // to check for it.
    if (count($collections) > 0) {
      foreach ($collections as $collection) {
        $collection_pids[] = $collection['object']['value'];
      }
    }
    else {
      // If the object is a book page or a newspaper issue, query the RI
      // to get its ancestor collection.
      $object_cmodel_pids = $islandora_object->models;
      $pid = $islandora_object->id;
      if ($object_cmodel_pids[0] == 'islandora:newspaperIssueCModel'
        || $object_cmodel_pids[0] == 'islandora:pageCModel') {
        $query = <<<EOQ
          select ?collection from <#ri> where {
            # Get the collection that book pages and newspaper issues belong to.
            <info:fedora/$pid> <fedora-rels-ext:isMemberOf> ?parent .
            ?parent <fedora-rels-ext:isMemberOfCollection> ?collection .
          }
EOQ;
        $connection = islandora_get_tuque_connection();
        $results = $connection->repository->ri->sparqlQuery($query, 1);
        if (count($results)) {
          $collection_pids[] = $results[0]['collection']['value'];
        }
      }
      // If the object is a newspaper page, query the RI to get the
      // its ancestor collection.
      if ($object_cmodel_pids[0] == 'islandora:newspaperPageCModel') {
        $query = <<<EOQ
          select ?collection from <#ri> where {
            # Get the collection that newspaper pages belong to.
            <info:fedora/$pid> <fedora-rels-ext:isMemberOf> ?issue .
            ?issue <fedora-rels-ext:isMemberOf> ?newspaper .
            ?newspaper <fedora-rels-ext:isMemberOfCollection> ?collection .
          }
EOQ;
        $connection = islandora_get_tuque_connection();
        $results = $connection->repository->ri->sparqlQuery($query, 1);
        if (count($results)) {
          $collection_pids[] = $results[0]['collection']['value'];
        }
      }
    }
    return $collection_pids;
  }
}

/**
 * Returns the PIDs via solr of all collections an Islandora object belongs to.
 *
 * @param object $islandora_object
 *   The Islandora object being inspected.
 *
 * @return array $collection_pids
 *   A list of PIDS.
 */
function islandora_matomo_get_ancestorviasolr_collections($islandora_object) {
  module_load_include('inc', 'islandora_solr', 'query_processor');
  $collection_pids = [];
  // islandora:is_member_of_collection property.
  if ($islandora_object) {
    global $user;
    $query_processor = new IslandoraSolrQueryProcessor();
    $query = '*:*';
    $query_processor->buildQuery($query);
    // Todo make this solr field configurable.
    $query_processor->solrParams['fl'] = 'PID, ancestors_ms';
    $query_processor->solrParams['fq'][] = 'PID:' . "\"{$islandora_object->id}\"";
    try {
      $query_processor->executeQuery(FALSE);
      $solr_results = $query_processor->islandoraSolrResult['response'];
      if ($solr_results['numFound'] == 1) {
        if (isset($solr_results['objects'][0]['solr_doc']['ancestors_ms'])) {
          $collection_pids = (array) $solr_results['objects'][0]['solr_doc']['ancestors_ms'];
        }
      }
    } catch (Exception $e) {
      watchdog(
        t(
          'Islandora Matomo fetch Solr ancestors Error',
          nl2br(check_plain($e->getMessage()))
        ),
        NULL,
        WATCHDOG_WARNING
      );
    }
  }
  return $collection_pids;
}


/**
 * Returns the Authors and Department for an Islandora Object.
 *
 * @param object $islandora_object
 *   The Islandora object being inspected.
 *
 * @return array $dimensions
 *   An associative array in the form of:
 *    $dimensions['authors'] = array()
 *    $dimensions['departments'] = array()
 */
function islandora_matomo_get_dimensionsviasolr($islandora_object) {
  module_load_include('inc', 'islandora_solr', 'query_processor');
  $dimensions = [];
  // islandora:is_member_of_collection property.
  if ($islandora_object) {
    global $user;
    $query_processor = new IslandoraSolrQueryProcessor();
    $query = '*:*';
    $query_processor->buildQuery($query);
    // Todo make this solr field configurable.
    $author_field = variable_get(
      'islandora_matomo_author_solrfield',
      'mods_identifier_u1_ms'
    );
    $department_field = variable_get(
      'islandora_matomo_department_solrfield',
      'mods_identifier_u2_ms'
    );

    $query_processor->solrParams['fl'] = "PID, {$author_field}, {$department_field}";
    $query_processor->solrParams['fq'][] = 'PID:' . "\"{$islandora_object->id}\"";
    try {
      $query_processor->executeQuery(FALSE);
      $solr_results = $query_processor->islandoraSolrResult['response'];

      if ($solr_results['numFound'] == 1) {
        if (isset($solr_results['objects'][0]['solr_doc'][$author_field])) {
          $dimensions['authors'] = (array) $solr_results['objects'][0]['solr_doc'][$author_field];
        }
        if (isset($solr_results['objects'][0]['solr_doc'][$department_field])) {
          $dimensions['departments'] = (array) $solr_results['objects'][0]['solr_doc'][$department_field];
        }
      }
    } catch (Exception $e) {
      watchdog(
        t(
          'Islandora Matomo fetch Solr Authors and Departments Error',
          nl2br(check_plain($e->getMessage()))
        ),
        NULL,
        WATCHDOG_WARNING
      );
    }
  }
  return $dimensions;
}

/**
 * Returns the Matomo site ID to use for the current object using.
 *
 * @param object $islandora_object
 *   The Islandora object being inspected.
 *
 * @return string $site_id
 *   The site ID to use.
 */
function islandora_matomo_get_site_id($islandora_object) {
  $general_site_id = variable_get('islandora_matomo_site_id', '1');
  $collection_site_ids_setting = variable_get(
    'islandora_matomo_collection_site_ids',
    ''
  );
  // If there are no collection-specific site IDs, use the general one.
  if (!strlen($collection_site_ids_setting)) {
    return $general_site_id;
  }
  else {
    $collection_ids = [];
    $entries = array_filter(
      preg_split('/\r\n|[\r\n]/', $collection_site_ids_setting)
    );
    foreach ($entries as &$entry) {
      list($pid, $site_id) = explode(',', $entry);
      $pid = trim($pid);
      $collection_ids[$pid] = trim($site_id);
    }
  }

  // If the object is a collection object, its PID might be in the
  // list of collection-specific site IDs. Test this first since
  // doing so is less expensive then the following operation.
  if (array_key_exists($islandora_object->id, $collection_ids)) {
    return $collection_ids[$islandora_object->id];
  }
  else {
    return $general_site_id;
  }
}

/**
 * Returns the Matomo site ID to use for the current object using.
 *
 * @param string $pid
 *   The Islandora object PID being inspected.
 *
 * @return array $site_ids
 *   The PIWIK IDs to use for this PID.
 */
function islandora_matomo_get_site_ids_bypid($pid) {
  $general_site_id = variable_get('islandora_matomo_site_id', '1');
  $collection_site_ids_setting = variable_get(
    'islandora_matomo_collection_site_ids',
    ''
  );
  // If there are no collection-specific site IDs, use the general one.
  if (!strlen(trim($collection_site_ids_setting))) {
    return [$general_site_id];
  }
  else {
    $collection_ids = [];
    $entries = array_filter(
      preg_split('/\r\n|[\r\n]/', $collection_site_ids_setting)
    );
    foreach ($entries as $entry) {
      list($pid2, $site_id) = explode(',', $entry);
      if ($pid == trim($pid2)) {
        $collection_ids[] = trim($site_id);
      }
    }
  }

  // If the object is a collection object, its PID might be in the
  // list of collection-specific site IDs. Test this first since
  // doing so is less expensive then the following operation.
  if (count($collection_ids) > 0) {
    //Add also the default one to keep general track
    $collection_ids[] = $general_site_id;
    //In case of duplicates, remove
    $collection_ids = array_unique($collection_ids);
    return $collection_ids;
  }
  else {
    return [$general_site_id];
  }
}

/**
 * Implements hook_page_alter().
 */
function islandora_matomo_page_alter(&$page) {
  module_load_include('inc', 'islandora', 'includes/utilities');
  global $_islandora_solr_queryclass;

  $matomo_url = rtrim(
      variable_get('islandora_matomo_url', 'http://matomo.example.com'),
      '/'
    ) . '/';
  $endpoint = $matomo_url . 'matomo.php';
  $general_site_id = $siteId = variable_get('islandora_matomo_site_id', '1');

  $script = "var _paq = window._paq || [];";
  // Enables link tracking
  $script .= "_paq.push(['alwaysUseSendBeacon']);";
  $script .= "_paq.push(['enableLinkTracking']);";
  $script .= "(function() {
    var u='{$matomo_url}';
    _paq.push(['setTrackerUrl', u+'matomo.php']);
    _paq.push(['setSiteId', {$general_site_id}]);
    var d=document, g=d.createElement('script'), s=d.getElementsByTagName('script')[0];
    g.type='text/javascript'; g.async=true; g.defer=true; g.src=u+'matomo.js'; s.parentNode.insertBefore(g,s);
  })();";
  $siteIds = [];
  $script2 = '';
  $script3 = '';
  $inOtherIds = FALSE;
  // Asume this will be true for all Solr Search pages.
  if (!empty($_islandora_solr_queryclass)) {
    // Searching in a particular collection?
    // Cp? Could be anything since it is user provided data.
    if (isset($_islandora_solr_queryclass->internalSolrParams['cp']) && islandora_is_valid_pid(
        $_islandora_solr_queryclass->internalSolrParams['cp']
      )) {
      $object = islandora_object_load(
        $_islandora_solr_queryclass->internalSolrParams['cp']
      );
      $collectionsearch = $_islandora_solr_queryclass->internalSolrParams['cp'];
      $siteIds = is_object($object) ? islandora_matomo_get_site_ids_bypid(
        $object->id
      ) : [$general_site_id];
    }
    // Check if we are using facets.
    $keywordlist = isset($_islandora_solr_queryclass->internalSolrParams['f']) ? (array) $_islandora_solr_queryclass->internalSolrParams['f'] : [];
    array_unshift($keywordlist, $_islandora_solr_queryclass->solrQuery);
    if (isset($collectionsearch)) {
      array_unshift($keywordlist, $collectionsearch);
    }
    $searchtype = isset($_islandora_solr_queryclass->internalSolrParams['type']) ? $_islandora_solr_queryclass->internalSolrParams['type'] : 'advanced';
    if ($searchtype == 'edismax' || $searchtype == 'dismax') {
      $searchtype = "simple";
    }
    $keywords = urlencode(stripslashes(implode(' ', $keywordlist)));
    $script .= "_paq.push(['trackSiteSearch',
    \"{$keywords}\",
    \"{$searchtype}\",
     {$_islandora_solr_queryclass->islandoraSolrResult['response']['numFound']}
    ]);";
    foreach ($siteIds as $siteId) {
      if ($siteId != $general_site_id) {
        $inOtherIds = TRUE;
        $script2 .= "var piwikTracker{$siteId} = Piwik.getTracker('{$endpoint}', {$siteId});";
        $script2 .= "piwikTracker{$siteId}.trackSiteSearch(\"{$keywords}\",
        \"{$searchtype}\",
        {$_islandora_solr_queryclass->islandoraSolrResult['response']['numFound']});";
      }
    }
    if ($inOtherIds) {
      $script .= 'window.piwikAsyncInit = function () { try {';
      $script .= $script2;
      $script .= '} catch( err ) {console.log(err);}};';
    }
    drupal_add_js(
      $script,
      [
        'type' => 'inline',
        'scope' => 'header',
        'weight' => 50,
      ]
    );
  }
  else {
    // Refactor to allow path alias
    $path = current_path();
    $path_args = explode('/', $path);
    if (isset($path_args[0]) && $path_args[0] == 'islandora' && isset($path_args[1]) && $path_args[1] == 'object') {
      $object = menu_get_object('islandora_object', 2);
      if ($object) {
        $collections = [];
        $idtocollectionmapping = [];
        // Record usage of the object's collection(s).
        // Check first if the visited object is a collection,
        // because it may not be in the list of ancestors
        if (in_array('islandora:collectionCModel', $object->models)) {
          $collections[] = $object->id;
        }

        $script3 .= 'window.piwikAsyncInit = function () { try {';
        if (variable_get('islandora_matomo_track_collection_usage', 1)) {
          $collections += islandora_matomo_get_ancestorviasolr_collections(
            $object
          );
          foreach ($collections as $collection) {
            // We don't want to count usage of the islandora:root collection.
            if (($collection != 'islandora:root') && ($collection != 'islandora:featured_collection')) {
              $siteIds2 = islandora_matomo_get_site_ids_bypid($collection);
              foreach ($siteIds2 as $siteId2) {
                $idtocollectionmapping[$siteId2][] = $collection;
              }
            }
          }

          foreach ($idtocollectionmapping as $siteId => $collectionpids) {
            $script3 .= "var piwikTracker{$siteId} = Piwik.getTracker('{$endpoint}', {$siteId});";
            $collectionpid_unique = array_unique($collectionpids);
            // Tracks Dimension per Object ID
            $script3 .= "piwikTracker{$siteId}.setCustomDimension(2, '{$object->id}');";
            foreach ($collectionpid_unique as $collectionpid) {
              $collectionpidURL = urlencode($collectionpid);
              // Tracks Dimension per Collection Membership ID
              $script3 .= "piwikTracker{$siteId}.setCustomDimension(1, '{$collectionpidURL}');";
            }
            $script3 .= "piwikTracker{$siteId}.trackPageView();";
            $script3 .= "console.log('tracking site {$siteId}');";
          }

        }

        // Track Author and Department Dimensions
        $extradimensions = [];
        $extradimensions += islandora_matomo_get_dimensionsviasolr($object);

        $siteIdForExtraDimension = variable_get('islandora_matomo_moredimensions_site_id', '2');
        $script3 .= "var piwikTracker{$siteIdForExtraDimension} = Piwik.getTracker('{$endpoint}', {$siteIdForExtraDimension});";
        $script3 .= "piwikTracker{$siteIdForExtraDimension}.enableLinkTracking();";
        if (isset($extradimensions['authors']) && !empty($extradimensions['authors'])) {
          foreach ($extradimensions['authors'] as $author) {
            $script2 .= "_paq.push(['trackEvent','Readership', 'Author', '{$author}']);";
            $script3 .= "piwikTracker{$siteIdForExtraDimension}.setCustomDimension(3, '{$author}');";
            $script3 .= "piwikTracker{$siteIdForExtraDimension}.trackPageView();";
            $script3 .= "console.log('tracking author {$author}');";
          }
        }
        if (isset($extradimensions['departments']) && !empty($extradimensions['departments'])) {
          // Get rid of dimension 3 when starting tracking Dimension 4
          $script3 .= "piwikTracker{$siteIdForExtraDimension}.deleteCustomDimension(3);";
          foreach ($extradimensions['departments'] as $department) {
            $script3 .= "console.log('tracking department {$department}');";
            $script3 .= "piwikTracker{$siteIdForExtraDimension}.setCustomDimension(4, '{$department}');";
            $script3 .= "piwikTracker{$siteIdForExtraDimension}.trackPageView();";
          }
        }

        $script3 .= '} catch( err ) {console.log(err);}}';
        $script .= $script2.$script3;
        drupal_add_js(
          $script,
          [
            'type' => 'inline',
            'scope' => 'header',
            'weight' => 50,
          ]
        );
      }
    }
  }
  if (arg(0) != 'islandora' && arg(1) != 'object' && isset($page['footer'])) {
    $tracking_code = variable_get(
      'islandora_matomo_javascript_tracking_code',
      ''
    );
    $page['footer']['islandora_matomo']['#markup'] = $tracking_code;
  }
}

/*
**
* Implements hook_theme().
 */
function islandora_matomo_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_matomo_widget' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-matomo-widget',
      'pattern' => 'islandora-matomo-widget__',
      'variables' => array(
        'pid' => NULL,
      )
    )
  );
}

/**
 * Implements hook_block_info().
 */
function islandora_matomo_block_info() {
  $blocks['matomo_object_widget'] = array(
    'info' => t('Islandora Matomo Real time visitors widget'),
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => 'islandora/object/*',
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function islandora_matomo_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'matomo_object_widget':
      $object = menu_get_object('islandora_object', 2);
      if ($object) {
        if (islandora_matomo_show_for_cmodel($object)) {
          module_load_include('inc', 'islandora_matomo', 'includes/blocks');
          $block['subject'] = NULL;
          $block['content'] = islandora_matomo_widgetonobject_block($object);
        }
      }
      break;
    default:
  }
  return $block;
}
/**
 * Implements hook_block_configure().
 */
function islandora_matomo_block_configure($delta='') {
  $form = array();

  switch($delta) {
    case 'matomo_object_widget':
      module_load_include('inc', 'islandora', 'includes/utilities');
      $options = islandora_get_content_models();
      $selected = variable_get('islandora_matomo_report_enabled_content_models', array('ir:citationCModel', 'ir:thesisCModel'));
      foreach ($selected as $cmodel) {
        if (isset($options[$cmodel])) {
          $options = array($cmodel => $options[$cmodel]) + $options;
        }
      }
      foreach ($options as $key => $value) {
        $rows[$key] = array(
          'pid' => $key,
          'title' => $value['label'],
        );
        in_array($key, $selected) ? $defaults[$key] = TRUE : $defaults[$key] = FALSE;
      }
      $header = array(
        'pid' => array('data' => t('PID')),
        'title' => array('data' => t('Content Model')),
      );

      $form['intro'] = array(
        '#type' => 'item',
        '#title' => 'Select allowed Islandora Content Models.',
        '#description' => t('Objects defined by selected Content Models will show this block. The block "Pages" configuration can limit this option further.'),
      );
      $form['the_table'] = array(
        '#type' => 'tableselect',
        '#header' => $header,
        '#options' => $rows,
        '#default_value' => $defaults,
      );

      break;
  }
  return $form;
}
/*
* Implements hook_block_save().
 */
function islandora_matomo_block_save($delta = '', $edit = array()) {
  switch($delta) {
    case 'matomo_object_widget':
      $enabled = array_filter($edit['the_table']);
      variable_set('islandora_matomo_report_enabled_content_models', $enabled);
      break;
  }
}

/**
 * Determine if the object has an allowed Content model Object Matomo Report Blocks.
 *
 * @param \AbstractObject $object
 *   The object we are viewing.
 *
 * @return bool
 *   Whether $object has a content model to show badges for.
 */
function islandora_matomo_show_for_cmodel(AbstractObject $object) {
  $show_cmodels = variable_get('islandora_matomo_report_enabled_content_models', array('ir:citationCModel', 'ir:thesisCModel'));
  return (count(array_intersect($object->models, $show_cmodels)) > 0);
}


/**
 * Implements hook_cron().
 *
 * Gets all users that want a matomo report and send them a gist via email.
 */
function islandora_matomo_cron() {
  if (!variable_get('islandora_matomo_send_emails', 1)) { return; }

  module_load_include('inc', 'islandora_matomo', 'includes/mailer_utils');
  $now = time();
  $lasttime = strtotime("-20DAYS", $now);
  $field = 'field_islandoramatomo_userkey';

  // Force the query to run as user 1 so we have full access to fields.

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type','user')
    ->entityCondition('bundle', 'user')
    ->fieldCondition($field, 'value', 'NULL', '<>')
    ->fieldCondition('field_islandoramatomo_sendreport','value',1,'=')
    ->fieldCondition('field_islandoramatomo_lastreport','value',$lasttime,'<')
    ->propertyOrderBy('uid')
    ->addMetaData('account', user_load(1));
  $results = $query->execute();
  if (isset($results['user'])) {
    foreach ($results['user'] as $key => $user) {
      $realuser = user_load($user->uid);
      $key = $realuser->{$field}[LANGUAGE_NONE][0]['value'];
      // Only process stats for users that have Objects and a Scholar Profile. If not why?
      if ((($pid = islandora_matomo_get_userprofile(
            $key
          )) != NULL) && ($objectcount = islandora_matomo_get_objectcount_foruser(
          $key
        ))) {
        islandora_matomo_user_notify($realuser, $pid, $key, $objectcount);
      }
    }
  }
}

/**
 * Implements hook_mail().
 */
function islandora_matomo_mail($key, &$message, $params) {
  $username = format_username($params['user']);
  $useruid = $params['user']->uid;
  $sitename = variable_get('site_name', 'Islandora Repository');
  $upl = user_preferred_language($params['user']);
  $month = $params['month'];
  $year = $params['year'];
  $numobjects = $params['objectcount']; // query Solr for this.
  $matomo_actions = $params['hits'];
  $pid = $params['profile_pid']; // Make this the Scholar profile Object.
  /*

  Subject: Your [most recent month] readership report from [Repository name]

  Dear [ Jon Jon ],

  Here is your monthly readership report provided by [Repository name]. Your work was accessed [x] times in [most recent month].

  As of [most recent month], you have deposited [x] works in [Repository Name] and your work has been accessed a total of [x] times.

  Visit your [author dashboard] to learn more about your readership.

  [Contact Us] | [Unsubscribe] | Visit [Repository Name]

 */


  $message['headers']['MIME-Version'] = '1.0';
  $message['headers']['Content-Type'] = 'text/plain;charset=utf-8';
  $message['subject'] = t('Your !month !year readership report from !sitename', array(
    '!month' => $month,
    '!year' => $year,
    '!sitename' => $sitename
  ), array('langcode' => $upl->language));
  $message['body'][] = t('Dear !username,', array(
    '!username' => $username,
  ), array('langcode' => $upl->language));
  $message['body'][] = t('Here is your monthly readership report provided by !sitename', array(
    '!sitename' => $sitename
  ), array('langcode' => $upl->language));
  $message['body'][] = t('As of !month, you have deposited !numobjects works in !sitename and your work has been accessed a total of !hits times.', array(
    '!month' => $month,
    '!numobjects' => $numobjects,
    '!sitename' => $sitename,
    '!hits' => $matomo_actions,
  ), array('langcode' => $upl->language));
  $message['body'][] = t('Visit your \'!url\' to learn more about your readership.', array(
    '!url' => url('islandora/object/' . $pid . '/readership' , array('absolute' => TRUE)),
  ), array('langcode' => $upl->language));

  $message['body'][]= t('This is an automatic e-mail from !sitename.',
      array('!sitename' => variable_get('site_name', 'Drupal')), array('langcode' => $upl->language));

  $message['body'][] = t('To stop receiving these e-mails, change your Reader Ship notification preferences at !url', array(
      '!url' => url('user/' . $useruid , array('absolute' => TRUE)),
  ), array('langcode' => $upl->language));

}
