<?php

/**
 * @file
 * The main Piwik module file.
 */

/**
 * Implements hook_menu().
 */
function islandora_piwik_menu() {
  $items = array();
  $items['admin/islandora/tools/piwik'] = array(
    'title' => 'Islandora Piwik',
    'description' => 'Configure Islandora Piwik.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_piwik_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin settings form builder.
 */
function islandora_piwik_admin_settings() {
  $form['islandora_piwik_endpoint'] = array(
    '#title' => t("Piwik API endpoint"),
    '#type' => 'textfield',
    '#size' => 60,
    '#default_value' => variable_get('islandora_piwik_endpoint', 'http://piwik.example.com/piwik.php'),
    '#description' => t("Your Piwik instance's API endpoint"),
    '#maxlength' => 255,
  );
  $form['islandora_piwik_site_id'] = array(
    '#title' => t('Site ID'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => variable_get('islandora_piwik_site_id', '1'),
    '#description' => t("The ID of the site to track"),
    '#maxlength' => 5,
  );
  $form['islandora_piwik_timeout'] = array(
    '#title' => t('Timeout'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => variable_get('islandora_piwik_timeout', '2'),
    '#description' => t("Number of seconds to use as the timeout for requests to
      the Piwki endpoint."),
    '#maxlength' => 5,
  );
  return system_settings_form($form);
}

/**
 * Implements hook_islandora_view_object().
 */
function islandora_piwik_islandora_view_object($object) {
  dd("OK, I have been accessed.");
  $timeout = (int) variable_get('islandora_piwik_timeout', '2');
  $endpoint = variable_get('islandora_piwik_endpoint', 'http://piwik.example.com/piwik.php');
  $idsite = variable_get('islandora_piwik_site_id', '1');

  // Record usage of the object.
  global $base_url;
  $current_path = $base_url . '/' . current_path();
  $query = '?apiv=1&rec=1';
  $query .= '&idsite=' . $idsite;
  $query .= '&url=' . $current_path;
  // We urldecode() the referrer because URLS produced by Islandora
  // are usually encoded.
  $query .= '&urlref=' . urlencode(urldecode($_SERVER['HTTP_REFERER']));
  $uri = $endpoint . $query;
  $return = drupal_http_request($uri, array('timeout' => $timeout));

  // Record usage of the object's collection(s).
  $collections = $object->relationships->get(FEDORA_RELS_EXT_URI, 'isMemberOfCollection');
  for ($i = 0; $i < count($collections); ++$i) {
    // We don't want to count usage of the islandora:root collection.
    if ($collections[$i]['object']['value'] != 'islandora:root') {
      $query = '?apiv=1&rec=1';
      $query .= '&idsite=' . $idsite;
      // Create the JSON object that holds the custom Piwik variable that
      // tracks the collection PID. We do not include the collection URL
      // in our request to the Piwik API since doing so would double-count
      // usage of the collection.
      $cvar_object = new stdClass();
      $cvar_object->{1} = array('collection_pid', $collections[$i]['object']['value']);
      $query .= '&cvar=' . urlencode(json_encode($cvar_object));
      $uri = $endpoint . $query;
      $return = drupal_http_request($uri, array('timeout' => $timeout));
    }
  }
  return NULL;
}

/**
 * Implements hook_islandora_solr_results_alter().
 */
function islandora_piwik_islandora_solr_object_result_alter(&$search_result, $query_processor) {
  $timeout = (int) variable_get('islandora_piwik_timeout', '2');
  $endpoint = variable_get('islandora_piwik_endpoint', 'http://piwik.example.com/piwik.php');
  $idsite = variable_get('islandora_piwik_site_id', '1');

  global $base_url;
  $current_path = $base_url . '/' . current_path();
  $query = '?apiv=1&rec=1';
  $query .= '&idsite=' . $idsite;
  $query .= '&url=' . $current_path;
  $query .= '&search=' .  $query_processor->solrQuery;
  // We urldecode() the referrer because URLS produced by Islandora
  // are usually encoded.
  $query .= '&urlref=' . urlencode(urldecode($_SERVER['HTTP_REFERER']));
  $uri = $endpoint . $query;
  $return = drupal_http_request($uri, array('timeout' => $timeout));
}
