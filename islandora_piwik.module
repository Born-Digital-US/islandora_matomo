<?php

/**
 * @file
 * The main Piwik module file.
 */

/**
 * Implements hook_menu().
 */
function islandora_piwik_menu() {
  $items = array();
  $items['admin/islandora/tools/piwik'] = array(
    'title' => 'Islandora Piwik',
    'description' => 'Configure Islandora Piwik.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_piwik_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Admin settings form builder.
 */
function islandora_piwik_admin_settings() {
  $form['islandora_piwik_endpoint'] = array(
    '#title' => t("Piwik API endpoint"),
    '#type' => 'textfield',
    '#size' => 60,
    '#default_value' => variable_get('islandora_piwik_endpoint', 'http://piwik.example.com/piwik.php'),
    '#description' => t("Your Piwik instance's API endpoint"),
    '#maxlength' => 255,
  );
  $form['islandora_piwik_site_id'] = array(
    '#title' => t('Site ID'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => variable_get('islandora_piwik_site_id', '1'),
    '#description' => t("The Piwik site ID."),
    '#maxlength' => 5,
  );
  $form['islandora_piwik_collection_site_ids'] = array(
    '#title' => t('Collection-specific site IDs'),
    '#type' => 'textarea',
    '#size' => 5,
    '#default_value' => variable_get('islandora_piwik_collection_site_ids', ''),
    '#description' => t("Piwik site IDs for specific collections, one entry per
      row. Each row should be in PID, site ID format
      (e.g., \"islandora:mycollection, 5\"). Multiple collections can be
      associated with the same site ID."),
  );
  $form['islandora_piwik_timeout'] = array(
    '#title' => t('Timeout'),
    '#type' => 'textfield',
    '#size' => 5,
    '#default_value' => variable_get('islandora_piwik_timeout', '2'),
    '#description' => t("Number of seconds to use as the timeout for requests to
      the Piwki endpoint."),
    '#maxlength' => 5,
  );
  $form['islandora_piwik_track_collection_usage'] = array(
    '#type' => 'checkbox',
    '#title' => t('Track collection usage'),
    '#default_value' => variable_get('islandora_piwik_track_collection_usage', 1),
    '#description' => t("Check this option if you want to track collection usage
      in addtion to object usage. If enabled, each object's parent collections
      are counted every time the object is viewed, and usage reports will be
      available under \"Visitors > Custom Variables\" in your Piwik server.
      High-traffic or large sites may want to disable this option to improve
      performance."),
  );

  return system_settings_form($form);
}

/**
 * Implements hook_islandora_view_object().
 */
function islandora_piwik_islandora_view_object($object) {
  $timeout = (int) variable_get('islandora_piwik_timeout', '2');
  $endpoint = variable_get('islandora_piwik_endpoint', 'http://piwik.example.com/piwik.php');
  $site_id = islandora_piwik_get_site_id($object);

  // Record usage of the object.
  global $base_url;
  $current_path = $base_url . '/' . current_path();
  $query = '?apiv=1&rec=1';
  $query .= '&idsite=' . $site_id;
  $query .= '&url=' . $current_path;
  // We urldecode() the referrer because URLS produced by Islandora
  // are usually encoded.
  $query .= '&urlref=' . urlencode(urldecode($_SERVER['HTTP_REFERER']));
  $uri = $endpoint . $query;
  $return = drupal_http_request($uri, array('timeout' => $timeout));

  // Record usage of the object's collection(s).
  if (variable_get('islandora_piwik_track_collection_usage', 1)) {
    $collections = islandora_piwik_get_ancestor_collections($object);
    foreach ($collections as $collection) {
      // We don't want to count usage of the islandora:root collection.
      if ($collections != 'islandora:root') {
        $query = '?apiv=1&rec=1';
        $query .= '&idsite=' . $site_id;
        // Create the JSON object that holds the custom Piwik variable that
        // tracks the collection PID. We do not include the collection URL
        // in our request to the Piwik API since doing so would double-count
        // usage of the collection.
        $cvar_object = new stdClass();
        $cvar_object->{1} = array('collection_pid', $collection);
        $query .= '&cvar=' . urlencode(json_encode($cvar_object));
        $uri = $endpoint . $query;
        $return = drupal_http_request($uri, array('timeout' => $timeout));
      }
    }
  }
  return array();
}

/**
 * Implements hook_islandora_solr_query_result().
 */
function islandora_piwik_islandora_solr_query_result($result) {
  $timeout = (int) variable_get('islandora_piwik_timeout', '2');
  $endpoint = variable_get('islandora_piwik_endpoint', 'http://piwik.example.com/piwik.php');
  $site_id = variable_get('islandora_piwik_site_id', '1');
  global $base_url;

  $current_path = $base_url . '/' . current_path();
  $query = '?apiv=1&rec=1';
  $query .= '&idsite=' . $site_id;
  $search_words = $result['responseHeader']['params']['q'];
  $search_words = urlencode($search_words);
  $query .= '&search=' . $search_words;
  if ($result['response']['numFound'] === 0) {
    $query .= '&search_count=0';
  }
  $query .= '&url=' . $current_path;
  $uri = $endpoint . $query;
  $return = drupal_http_request($uri, array('timeout' => $timeout));
}

/**
 * Returns the PIDs of all collections that the Islandora object belongs to.
 *
 * @param object $islandora_object
 *   The Islandora object being inspected.
 *
 * @return array $collection_pids
 *   A list of PIDS.
 */
function islandora_piwik_get_ancestor_collections($islandora_object) {
  $collection_pids = array();
  // islandora:is_member_of_collection property.
  if ($islandora_object) {
    $collections = $islandora_object->relationships->get(FEDORA_RELS_EXT_URI,
      'isMemberOfCollection');
    // The root collection PID will be a member of 0 collections, so we need
    // to check for it.
    if (count($collections) > 0) {
      foreach ($collections as $collection) {
        $collection_pids[] = $collection['object']['value'];
      }
    }
    else {
      // If the object is a book page or a newspaper issue, query the RI
      // to get its ancestor collection.
      $object_cmodel_pids = $islandora_object->models;
      $pid = $islandora_object->id;
      if ($object_cmodel_pids[0] == 'islandora:newspaperIssueCModel'
        || $object_cmodel_pids[0] == 'islandora:pageCModel') {
        $query = <<<EOQ
          select ?collection from <#ri> where {
            # Get the collection that book pages and newspaper issues belong to.
            <info:fedora/$pid> <fedora-rels-ext:isMemberOf> ?parent .
            ?parent <fedora-rels-ext:isMemberOfCollection> ?collection .
          }
EOQ;
        $connection = islandora_get_tuque_connection();
        $results = $connection->repository->ri->sparqlQuery($query, 1);
        $collection_pids[] = $results[0]['collection']['value'];
      }
      // If the object is a newspaper page, query the RI to get the
      // its ancestor collection.
      if ($object_cmodel_pids[0] == 'islandora:newspaperPageCModel') {
        $query = <<<EOQ
          select ?collection from <#ri> where {
            # Get the collection that newspaper pages belong to.
            <info:fedora/$pid> <fedora-rels-ext:isMemberOf> ?issue .
            ?issue <fedora-rels-ext:isMemberOf> ?newspaper .
            ?newspaper <fedora-rels-ext:isMemberOfCollection> ?collection .
          }
EOQ;
        $connection = islandora_get_tuque_connection();
        $results = $connection->repository->ri->sparqlQuery($query, 1);
        $collection_pids[] = $results[0]['collection']['value'];
      }
    }
    return $collection_pids;
  }
}

/**
 * Returns the Piwik site ID to use for the current object.
 *
 * @param object $islandora_object
 *   The Islandora object being inspected.
 *
 * @return string $site_id
 *   The site ID to use.
 */
function islandora_piwik_get_site_id($islandora_object) {
  $general_site_id = variable_get('islandora_piwik_site_id', '1');
  $collection_site_ids_setting = variable_get('islandora_piwik_collection_site_ids', '');
  // If there are no collection-specific site IDs, use the general one.
  if (!strlen($collection_site_ids_setting)) {
    return $general_site_id;
  }
  else {
    $collection_ids = array();
    $entries = preg_split('/\r\n|[\r\n]/', $collection_site_ids_setting);
    foreach ($entries as &$entry) {
      list($pid, $site_id) = explode(',', $entry);
      $pid = trim($pid);
      $collection_ids[$pid] = trim($site_id);
    }
  }

  // If the object is a collection object, its PID might be in the
  // list of collection-specific site IDs. Test this first since
  // doing so is less expensive then the following operation.
  if (array_key_exists($islandora_object->id, $collection_ids)) {
    return $collection_ids[$islandora_object->id];
  }
  // Get the collection PIDs of the current object, and test whether
  // any of them are registered to use a collection site ID. If the
  // object is a member of multiple collections, use the first one
  // encountered.
  $in_collections = islandora_piwik_get_ancestor_collections($islandora_object);
  foreach ($in_collections as $in_collection) {
    if (array_key_exists($in_collection, $collection_ids)) {
      return $collection_ids[$in_collection];
    }
    else {
      return $general_site_id;
    }
  }
}
